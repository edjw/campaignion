<?php

/**
 * @file
 * Campaignion newsletter module.
 */

use Drupal\campaignion_newsletters\Component;
use Drupal\campaignion_newsletters\CronRunner;
use Drupal\campaignion_newsletters\FormBuilderElementNewsletter;
use Drupal\campaignion_newsletters\NewsletterList;
use Drupal\campaignion_newsletters\ProviderFactory;
use Drupal\campaignion_newsletters\QueueItem;
use Drupal\campaignion_newsletters\Subscriptions;
use Drupal\campaignion\CRM\Import\Source\WebformSubmission;
use Drupal\little_helpers\Webform\Submission;

/**
 * Implements hook_cron().
 */
function campaignion_newsletters_cron() {
  _campaignion_newsletters_poll();
}

/**
 * Polling function.
 */
function _campaignion_newsletters_poll() {
  $factory = ProviderFactory::getInstance();
  foreach ($factory->providers() as $source) {
    $provider = $factory->providerByKey($source);
    foreach ($provider->getLists() as $list) {
      $list->save();
    }
  }
  variable_set('campaignion_newsletters_last_list_poll', REQUEST_TIME);
}

/**
 * Implements hook_permission().
 */
function campaignion_newsletters_permission() {
  return [
    'administer newsletters' => [
      'title' => t('Administer Newsletters'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function campaignion_newsletters_menu() {
  $items['admin/config/services/campaignion_newsletters'] = [
    'title' => 'Newsletter settings',
    'description' => 'Configure newsletter API behavior',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['campaignion_newsletters_admin_settings'],
    'access arguments' => ['administer newsletters'],
    'file' => 'includes/pages.php',
    'type' => MENU_NORMAL_ITEM,
  ];
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Implements hook_form_redhen_contact_contact_form_alter().
 */
function campaignion_newsletters_form_redhen_contact_contact_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'php', 'campaignion_newsletters', 'includes/pages');
  _campaignion_newsletters_form_redhen_contact_contact_form_alter($form, $form_state);
}

/**
 * Implements hook_webform_component_info().
 */
function campaignion_newsletters_webform_component_info() {
  $info['newsletter'] = [
    'label' => t('Newsletter Subscription'),
    'description' => t('Offers a user to subscribe to a given newsletter.'),
    'features' => [
      'conditional' => TRUE,
    ],
    'file' => 'campaignion_newsletters.component.inc',
    'conditional_type' => 'newsletter',
  ];
  return $info;
}

/**
 * Implements hook_webform_conditional_operator_info().
 */
function campaignion_newsletters_webform_conditional_operator_info() {
  $operators['newsletter']['equal'] = [
    'label' => t('is'),
    'comparison callback' => '_webform_conditional_comparison_newsletter_equal',
    'js comparison callback' => 'conditionalOperatorNewsletterEqual',
    'form callback' => 'campaignion_newsletters_webform_conditional_form',
  ];
  $operators['newsletter']['not_equal'] = [
    'label' => t('is not'),
    'comparison callback' => '_webform_conditional_comparison_newsletter_not_equal',
    'js comparison callback' => 'conditionalOperatorNewsletterNotEqual',
    'form callback' => 'campaignion_newsletters_webform_conditional_form',
  ];
  return $operators;
}

/**
 * Form callback for newsletter conditionals.
 */
function campaignion_newsletters_webform_conditional_form($node) {
  $forms = [];
  foreach ($node->webform['components'] as $cid => $component) {
    if (webform_component_property($component['type'], 'conditional_type') == 'newsletter') {
      $options = [];
      // Checkbox options.
      if ($component['extra']['display'] == 'checkbox') {
        $options['checkbox:opt-in'] = t('Checkbox opt-in');
        $options['checkbox:no-change'] = t('Checkbox no change');
      }
      // Radio options.
      elseif ($component['extra']['display'] == 'radios') {
        $options['radios:opt-in'] = t('Radio opt-in');
        if (!empty($component['extra']['no_is_optout'])) {
          $options['radios:opt-out'] = t('Radio opt-out');
        }
        else {
          $options['radios:no-change'] = t('Radio no change');
        }
        $options['radios:not-selected'] = t('Radio not selected (no change)');
      }
      $element = [
        '#type' => 'select',
        '#options' => $options,
      ];
      $forms[$cid] = drupal_render($element);
    }
  }
  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter() for webform_client_form().
 *
 * Load the JavaScript needed for same-page conditionals.
 */
function campaignion_newsletters_form_webform_client_form_alter(&$form, &$form_state) {
  // Webfrom (4.16) provides no concise way to test whether a component with the
  // 'newsletter' conditional type is the source for a same-page conditional on
  // the current webform page. For simplicity we simply do the same as webform
  // does: Load the JavaScript for every webform.
  $path = drupal_get_path('module', 'campaignion_newsletters');
  $form['#attached']['js'][] = "$path/campaignion_newsletters.conditionals.js";
}

/**
 * Implements hook_webform_submission_confirmed().
 */
function campaignion_newsletters_webform_submission_confirmed(Submission $submission) {
  $s = new WebformSubmission($submission->node, $submission);
  // Use value of the component with key 'email' as email address.
  if (!($email = $s->value('email'))) {
    return;
  }
  foreach ($s->webform->componentsByType('newsletter') as $component) {
    Component::fromComponent($component)->submit($email, $s);
  }
}

/**
 * Implements hook_form_builder_element_types().
 *
 * Defines a new form_builder field:
 * - 'title'
 * - in which ['palette_group'] it appears.
 * - it's ['default'] representation (is used when dragging it into the preview
 *   area) including:
 *   - ['#webform_component'] the component array for webform (most important
 *     it's ['#webform_component']['type'].
 *   - ['#type'] the form-API type is used as the default form_builder
 *     element_type.
 *   - ['#form_builder'] the form_builder type (again).
 * - whether or not the field is ['unique'].
 *
 * Fields are defined per form_type (so far only 'webform' is relevant for us).
 *
 * @see hook_form_builder_palette_groups()
 * @see hook_webform_component_info()
 * @see hook_element_info()
 * @see hook_form_builder_element_types()
 */
function campaignion_newsletters_form_builder_element_types($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  require_once dirname(__FILE__) . '/campaignion_newsletters.component.inc';
  $map = _form_builder_webform_property_map('newsletter');
  // Default value is handled by the newsletter property.
  unset($map['properties']['default_value']);
  $fields['newsletter'] = [
    'title' => t('Newsletter'),
    'class' => FormBuilderElementNewsletter::class,
    'properties' => array_keys($map['properties']),
    'default' => [
      '#form_builder' => ['element_type' => 'newsletter'],
    ] + _form_builder_webform_default('newsletter'),
  ];
  return $fields;
}

/**
 * Implements hook_entity_insert().
 *
 * Save all subscriptions for the redhen_contact.
 */
function campaignion_newsletters_entity_insert($entity, $entity_type) {
  campaignion_newsletters_entity_update($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 *
 * Save all subscriptions for the redhen_contact.
 */
function campaignion_newsletters_entity_update($entity, $entity_type) {
  if ($entity_type != 'redhen_contact') {
    return;
  }
  if (empty($entity->newsletters)) {
    $entity->newsletters = Subscriptions::byContact($entity);
  }
  $entity->newsletters->save();
}

/**
 * Implements hook_entity_delete().
 *
 * Unsubscribe from all newsletters.
 */
function campaignion_newsletters_entity_delete($entity, $entity_type) {
  if ($entity_type != 'redhen_contact') {
    return;
  }
  if (empty($entity->newsletters)) {
    $entity->newsletters = Subscriptions::byContact($entity);
  }
  $entity->newsletters->unsubscribeAll();
  $entity->newsletters->save();
}

/**
 * Implements hook_cronapi().
 */
function campaignion_newsletters_cronapi($op, $job = NULL) {
  $items['campaignion_newsletters_send_queue'] = [
    'description' => 'Send queue data to newsletter providers',
    'rule' => '*/2+@ * * * *',
    'weight' => 100,
    'callback' => [CronRunner::class, 'cronSendQueue'],
  ];
  $items['campaignion_newsletters_poll_subscriptions'] = [
    'descriptions' => 'Let providers poll their subscriptions in order to cach changes from the provider side.',
    'rule' => '*/2+@ * * * *',
    'callback' => [CronRunner::class, 'cronPoll'],
  ];
  $items['campaignion_newsletters_remove_stale_lists'] = [
    'descriptions' => 'Remove lists that havenâ€™t been seen in a while.',
    'rule' => '0+@ 0 * * *',
    'callback' => [CronRunner::class, 'removeStaleLists'],
  ];
  return $items;
}

/**
 * Implements hook_campaignion_newsletters_list_deleted().
 */
function campaignion_newsletters_campaignion_newsletters_list_deleted(NewsletterList $list) {
  Component::pruneList($list->list_id);
  Subscription::bulkDelete($list->list_id);
  QueueItem::bulkDelete($list->list_id);
}
